###############################
###### 	macros.cfg  ######
###############################

# Conditional G28
[gcode_macro CG28]
gcode:
   STATUS_HOMING
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    Z_TILT_ADJUST
    

[gcode_macro PLA]
gcode: 
    M140 S60 ; set final bed temp
    M104 S215

[gcode_macro ABS]
gcode: 
    M140 S110 ; set final bed temp
    M104 S260

#################################
######### HOUR COUNTER ##########
#################################
[gcode_macro COUNTER_OFF]
gcode: 
    Set_pin pin=hourCounter value=0

[gcode_macro COUNTER_ON]
gcode: 
    Set_pin pin=hourCounter value=1

##############################
######### LIGHTS ##########
##############################
[gcode_macro Lights_on]
gcode:
    Set_pin pin=caselight value=1

[gcode_macro Lights_off]
gcode:
    Set_pin pin=caselight value=0

[gcode_macro WIPE_NOZZLE]
gcode:
    CLEAN_NOZZLE ;NO WIPE

[gcode_macro ENABLE_FILAMENT_SENSOR]
gcode:
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1

[gcode_macro DISABLE_FILAMENT_SENSOR]
gcode:
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

[delayed_gcode startup_disable_filament_sensors]
initial_duration: 1
gcode:
    DISABLE_FILAMENT_SENSOR

[gcode_macro Z_TILT_ADJUST]
rename_existing: OG_Z_TILT_ADJUST
variable_adjusted: 0
gcode:
  OG_Z_TILT_ADJUST
  G28 Z
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST VARIABLE=adjusted VALUE=1

[gcode_macro M18]
rename_existing: M1800
gcode:
  M1800
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST VARIABLE=adjusted VALUE=0

[gcode_macro M84]
rename_existing: M8400
gcode:
  M8400
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST VARIABLE=adjusted VALUE=0

[gcode_macro PURGE_LINE] 
gcode:
  G90
  G1 X2 Y5 Z0.3 F30000
  G1 Y2 F1000 ; go outside print area
  G92 E0
  G1 X290 E50 F2000 ; intro line
  G92 E0
  G1 Z1 F720

[gcode_macro PRINT_START]

variable_chamber_min: 40

gcode:
    Lights_on
    # Parameters
    {% set BED = params.BED|int %}
    {% set HOTEND = params.EXTRUDER|int %}

    STATUS_HEATING
    M140 S{BED} ; set final bed temp
    M104 S175 ; set hotend idle temp, dont wait
    CG28
    WIPE_NOZZLE
    STATUS_HEATING

    ; Check to see if the chamber needs to be heated, this is only applicable for ABS prints
    {% if BED > 80 and printer['temperature_sensor chamber_temp'].temperature < chamber_min %} 
      M117 Waiting For Chamber Temp {chamber_min} Degrees...
      M106 S255 ;Turn fan on full blast to help circulate the air
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={chamber_min}    ; Wait for chamber to warm up
      M107 ;Turn fan off
      WIPE_NOZZLE
    {% endif %}

    M117 Waiting for Bed Temp...
    M190 S{BED} ; Wait for Bed to Heatup

    {% if not printer["gcode_macro Z_TILT_ADJUST"].adjusted %}
      STATUS_LEVELING
      M117 Quad Gantry Leveling...
      Z_TILT_ADJUST
    {% endif %}

    STATUS_MESHING
    M117 Calibrating Bed Mesh...
    BED_MESH_CALIBRATE
    RESET_EXTRUDER 
    WIPE_NOZZLE

    M117 Waiting for Hotend Temp...
    M109 S{HOTEND}
    CLEAN_NOZZLE EXTRUDER={HOTEND} ; Purge filament and wipe the nozzle just before the print starts
    ENABLE_FILAMENT_SENSOR
    M117 Purge Line...
    PURGE_LINE
    M117 Printing...
    ENABLE_FILAMENT_SENSOR

[gcode_macro PREPARE]

gcode:
    Lights_on
    # Parameters
    {% set BED = params.BED|default(110)|int %}
    {% set HOTEND = params.EXTRUDER|default(260)|int %}

    STATUS_HEATING
    M140 S{BED} ; set final bed temp
    M104 S{HOTEND}
    CG28
    WIPE_NOZZLE
     
    {% if not printer["gcode_macro Z_TILT_ADJUST"].adjusted %}
      STATUS_LEVELING
      M117 Quad Gantry Leveling...
      Z_TILT_ADJUST
      WIPE_NOZZLE
    {% endif %}

[gcode_macro RESET_EXTRUDER]
gcode:
    G92 E0 ; reset extruder

[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    DISABLE_FILAMENT_SENSOR
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    #COUNTER_OFF
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-20.0 F1800                 ; retract filament
    G1 Z{th.position.z + 20} F6000  ; move nozzle up 2mm
    WIPE_NOZZLE
    TURN_OFF_HEATERS
    G90                                      ; absolute positioning
    ;G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    M84
    M107                                     ; turn off fan
    Lights_off
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END



   
# Park bed for heatsoaking
[gcode_macro PARK]
gcode:
  {% if printer.idle_timeout.state != "Printing" or FORCE|int == 1 %}
    CG28                           ; Home if not already homed
    SAVE_GCODE_STATE NAME=PARK
    G90                            ; absolute positioning
    G0 X150 Y150 Z30 F5000        ; Move to position
    RESTORE_GCODE_STATE NAME=PARK
  {% else %}
    { action_respond_info("PARK disabled while printing!") }
  {% endif %}

# Park front for maintenance / cleaning
[gcode_macro PARKFRONT]
gcode:
  {% if printer.idle_timeout.state != "Printing" %}
    CG28                           ; Home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                            ; absolute coords
    G1 Z100 X130 Y10 F5000         ; Move to position
    RESTORE_GCODE_STATE NAME=PARKFRONT
  {% else %}
    { action_respond_info("PARKFRONT disabled while printing!") }
  {% endif %}

######################################################################
## Filament Change                                                  ##
######################################################################
# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 130mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "SWAP_RESUME" gcode.
[gcode_macro M600]
########### Gcode ############
gcode:
  {% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
  {% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
  {% set Z = params.Z|default(10)|int %}
  {% set E = params.E|default(-20)|int %}
  {% set tool = params.tool|default(0)|int %}
        SAVE_GCODE_STATE NAME=M600_state
        PAUSE
        G91
        G1 E-5 F4000
        G1 Z{Z}
        G90
        G1 X{X} Y{Y} F3000        ;park position
        G0 E10 F500                ;extrude filament to get better blob on end
        G0 E{E} F600             ;retract additional filament to move out of melt zone
        G92 E0
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0

#    Use this command resume during a mid print filament swap (DONT USE OCTO/MAINSAIL/DWC RESUME)
[gcode_macro SWAP_RESUME] 
gcode:
    RESTORE_GCODE_STATE NAME=M600_state
    WIPE_NOZZLE
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1
    resume
  
[gcode_macro LOAD]
gcode:
  SAVE_GCODE_STATE NAME=LOAD
  M117 Loading Filament!...
  G91
  G1 E100 F500 ;Load filament
  CLEAN_NOZZLE
  RESTORE_GCODE_STATE NAME=LOAD
  SET_IDLE_TIMEOUT TIMEOUT=7200
  
[gcode_macro UNPAUSE]
gcode:
  WIPE_NOZZLE
  M117 Printing...
  RESTORE_GCODE_STATE NAME=FIRSTMOVE MOVE=1
  RESUME

#[gcode_macro PURGE]
#gcode:
  #  G28
  #  SAVE_GCODE_STATE NAME=PURGE
    ;M104 S245 ; set extruder final temp
 #   M109 S245  ;wait for extruder final temp
    #PARKBUCKET
   # G1 E75 F300
    #TURN_OFF_HEATERS
  #  CLEAN_NOZZLE
  #  G28 Z
  #  RESTORE_GCODE_STATE NAME=PURGE


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  
  WIPE_NOZZLE
  DISABLE_FILAMENT_SENSOR
  
  M106 S0
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  {client.user_pause_macro|default("")}
  WIPE_NOZZLE
  DISABLE_FILAMENT_SENSOR
  PAUSE_BASE
  {client.user_pause_macro|default("")}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####

  WIPE_NOZZLE
  ENABLE_FILAMENT_SENSOR
  
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}


    
# enable to SET_KINEMATIC_POSITION for Z hop
[force_move]
enable_force_move: True


# Park Toolhead Routine
[gcode_macro Park_Toolhead]
gcode:
   G1 X150 Y150 F18000